name: 'Continuous integration'

on: [push, pull_request]

env:
  DEFAULT_PYTHON: '3.10'
  POETRY_VERSION: '1.1.13'

jobs:
  test:
    name: 'Test Python ${{ matrix.python-version }} on ${{ matrix.os }}'
    runs-on: ${{ matrix.os }}-latest
    strategy:
      matrix:
        os: [Ubuntu, Windows, macOS]
        python-version: ['3.7', '3.8', '3.9', '3.10']
    steps:
      - name: 'Check out repository'
        uses: actions/checkout@v3

      - name: 'Set up Python'
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: 'Install poetry'
        run: pip install "poetry==${{ env.POETRY_VERSION }}"

      - name: 'Install dependencies'
        run: poetry install

      - name: 'Run tests'
        run: poetry run pytest --cov

      - name: 'Upload coverage report'
        uses: codecov/codecov-action@v2

  check:
    name: 'Lint and type checks'
    runs-on: ubuntu-latest
    steps:
      - name: 'Check out repository'
        uses: actions/checkout@v3

      - name: 'Set up Python'
        uses: actions/setup-python@v3
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}

      - name: 'Install poetry'
        run: pip install "poetry==${{ env.POETRY_VERSION }}"

      - name: 'Install dependencies'
        run: poetry install

      - name: 'Check formatting'
        run: poetry run black --check .

      - name: 'Check linter'
        run: poetry run flake8

      - name: 'Check types'
        run: poetry run mypy

  build:
    name: Build assets and deploy on tags
    runs-on: ubuntu-latest
    needs: [test, check]
    steps:
      - name: 'Check out repository'
        uses: actions/checkout@v3

      - name: 'Set up Python'
        uses: actions/setup-python@v3
        with:
          python-version: ${{ env.DEFAULT_PYTHON }}

      - name: 'Install poetry'
        run: pip install "poetry==${{ env.POETRY_VERSION }}"

      - name: 'Install dependencies'
        run: poetry install

      - name: 'Build artifacts'
        run: poetry build

      - name: 'Deploy to PyPI'
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          poetry config pypi-token.pypi $PYPI_TOKEN
          poetry publish
